name: Build

on:
  push:
    branches:
      - master
  pull_request:

env:
  FLYTE_SDK_LOGGING_LEVEL: 10 # debug

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        python-version: ["3.8"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements files
          key: ${{ format('{0}-pip-{1}', runner.os, hashFiles('dev-requirements.in', 'requirements.in')) }}
      - name: Install dependencies
        run: |
          make setup && pip freeze
      - name: Test with coverage
        run: |
          make unit_test_codecov
      - name: Codecov
        uses: codecov/codecov-action@v3.1.0
        with:
          fail_ci_if_error: false

  build-integration:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        # python 3.11 has intermittent issues with the docker build + push step
        # https://github.com/flyteorg/flytekit/actions/runs/5800978835/job/15724237979?pr=1579
        python-version: ["3.8", "3.11"]
    steps:
      - uses: insightsengineering/disk-space-reclaimer@v1
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements files
          key: ${{ format('{0}-pip-{1}', runner.os, hashFiles('dev-requirements.in', 'requirements.in')) }}
      - name: Install dependencies
        run: make setup && pip freeze
      - name: Install FlyteCTL
        uses: unionai-oss/flytectl-setup-action@master
      - name: Setup Flyte Sandbox
        run: |
          flytectl demo start
          flytectl config init
      - name: Build and push to local registry
        run: |
          docker build . -f Dockerfile.dev -t localhost:30000/flytekit:dev --build-arg PYTHON_VERSION=${{ matrix.python-version }}
      - name: Integration Test with coverage
        env:
          FLYTEKIT_IMAGE: localhost:30000/flytekit:dev
          FLYTEKIT_CI: 1
        run: make integration_test_codecov
      - name: Codecov
        uses: codecov/codecov-action@v3.1.0
        with:
          fail_ci_if_error: false

  build-plugins:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8"]
        plugin-names:
          # Please maintain an alphabetical order in the following list
          - flytekit-airflow
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements files
          key: ${{ format('{0}-pip-{1}', runner.os, hashFiles('dev-requirements.txt', format('plugins/{0}/requirements.txt', matrix.plugin-names ))) }}
      - name: Install dependencies
        run: |
          make setup
          cd plugins/${{ matrix.plugin-names }}
          pip install -r requirements.txt
          if [ -f dev-requirements.txt ]; then pip install -r dev-requirements.txt; fi
          pip install -U https://github.com/flyteorg/flytekit/archive/${{ github.sha }}.zip#egg=flytekit
          pip freeze
      - name: Test with coverage
        run: |
          cd plugins/${{ matrix.plugin-names }}
          # onnx plugins does not support protobuf>4 yet (in fact it is tensorflow that
          # does not support that yet). More details in https://github.com/onnx/onnx/issues/4239.
          if [[ ${{ matrix.plugin-names }} == *"onnx"* || ${{ matrix.plugin-names }} == "flytekit-whylogs" || ${{ matrix.plugin-names }} == "flytekit-mlflow" ]]; then
             PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python coverage run -m pytest tests --cov=./ --cov-report=xml --cov-append
          else
             coverage run -m pytest tests --cov=./ --cov-report=xml --cov-append
          fi
      - name: Codecov
        uses: codecov/codecov-action@v3.1.0
        with:
          fail_ci_if_error: false
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch the code
        uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/dev-requirements.in') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.in
      - name: Lint
        run: |
          make lint
      - name: ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          ignore_paths: boilerplate

  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch the code
        uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip==21.2.4 setuptools wheel
          pip install -r doc-requirements.txt
      - name: Build the documentation
        run: |
          # TODO: Remove after buf migration is done and packages updated
          PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python make -C docs html
